@using EFMVC.Web.Areas.Admin.SearchClass;
@using EFMVC.Web.Areas.Admin.Models;
@model Tuple<List<InvoiceResult>, InvoiceFilter>
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="wrapper wrapper-content animated fadeIn">
    <div class="spiner-example loader" style="display:none;">
        <div class="sk-spinner sk-spinner-three-bounce">
            <div class="sk-bounce1"></div>
            <div class="sk-bounce2"></div>
            <div class="sk-bounce3"></div>
        </div>
    </div>
    <div class="p-w-md m-t-sm">
        <div class="row">
            <div class="col-lg-12">
                <div class="ibox">
                    <div class="ibox-content">
                        @Html.Partial("_InvoiceManagement", Tuple.Create<List<InvoiceResult>, InvoiceFilter>(Model.Item1, Model.Item2))
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    @Styles.Render("~/plugins/awesomeCheckboxStyles")
    @Styles.Render("~/plugins/clockpickerStyles")
    @*@Styles.Render("~/plugins/dateRangeStyles")*@
    @Styles.Render("~/Content/plugins/iCheck/custom")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/plugins/switcheryStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/nouiSliderStyles")
    @*@Styles.Render("~/plugins/dataPickerStyles")*@
    @Styles.Render("~/Content/plugins/ionRangeSlider/ionRangeStyles")
    @Styles.Render("~/plugins/imagecropperStyles")
    @Styles.Render("~/Content/plugins/colorpicker/colorpickerStyles")
    @Styles.Render("~/plugins/select2Styles")
    @Styles.Render("~/plugins/touchSpinStyles")
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
    @Styles.Render("~/plugins/sweetAlertStyles")
    @Styles.Render("~/plugins/daterangepickerNewStyles")

    a.disabled {
    pointer-events: none;
    cursor: default;
    }
}

@section Scripts {
    @Scripts.Render("~/plugins/sparkLine")
    @Scripts.Render("~/plugins/flot")
    @Scripts.Render("~/plugins/iCheck")
    @*@Scripts.Render("~/plugins/dataPicker")*@
    @Scripts.Render("~/plugins/ionRange")
    @Scripts.Render("~/plugins/nouiSlider")
    @Scripts.Render("~/plugins/jasnyBootstrap")
    @Scripts.Render("~/plugins/switchery")
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/knob")
    @Scripts.Render("~/plugins/imagecropper")
    @Scripts.Render("~/plugins/colorpicker")
    @Scripts.Render("~/plugins/clockpicker")
    @*@Scripts.Render("~/plugins/dateRange")*@
    @Scripts.Render("~/plugins/select2")
    @Scripts.Render("~/plugins/touchSpin")
    @Scripts.Render("~/plugins/jeditable")
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/plugins/sweetAlert")
    @Scripts.Render("~/plugins/daterangepickerNew")
    <script type="text/javascript">
        $(window).load(function () {

            $("#UserId").select2({
                placeholder: "All Users",
                containerCssClass: "userdrp",
                allowClear: true,
                ajax: {
                    //url: "https://api.github.com/search/repositories",
                    //dataType: 'json',

                    traditional: true,
                    url: '@Url.Action("FillUserDropdownAJAX", "UserPayment", new { area = "Admin" })',
                    type: "POST",
                    delay: 250,
                    data: function (params) {
                        return {
                            UserName: params.term, // search term
                            page: params.page
                        };
                    },
                    processResults: function (data, params) {
                        // parse the results into the format expected by Select2
                        // since we are using custom formatting functions we do not need to
                        // alter the remote JSON data, except to indicate that infinite
                        // scrolling can be used

                        return {
                            results: data
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) {
                    return markup;
                }, // let our custom formatter work
                minimumInputLength: 1,
                templateResult: formatRepo, // omitted for brevity, see the source of this page
                templateSelection: formatRepoSelection, // omitted for brevity, see the source of this page
                width: '100%'
            });

            function formatRepo(repo) {
                if (repo.loading) {

                    return repo.text
                };

                var markup =
                    '<div class="avatar">' +
                    '<div class="info">' +

                    '<div class="col-sm-16">' + repo.name + '</div>';

                markup += '</div></div> ';

                return markup;
            }

            function formatRepoSelection(repo) {
                return repo.name || repo.text;
            }



        });
        function getClientByUserId(userId) {
            $.ajax({
                traditional: true,
                url: '@Url.Action("GetClientsUser", "Invoice",new {area="Admin" })',
                type: "POST",
                data: { userId: userId },
                success: function (data) {
                    $("#InvoiceClientId").empty();
                    if (data == "nodata" || data == "error") {

                    }
                    else {
                        $.each(data, function (i, client) {
                            $("#InvoiceClientId").append('<option value="' + client.Id + '">' +
                                                            client.Name + '</option>');

                        });
                    }
                    $("#InvoiceClientId").trigger("chosen:updated");
                },
                error: function (jqXHR, exception) {
                    alert('Internal server error.Please try again.');
                }
            });
        }

        function getClientByUserId(userId) {
            $.ajax({
                traditional: true,
                url: '@Url.Action("GetClientsUser", "Invoice",new {area="Admin" })',
                type: "POST",
                data: { userId: userId },
                success: function (data) {
                    $("#InvoiceClientId").empty();
                    if (data == "nodata" || data == "error") {

                    }
                    else {
                        $.each(data, function (i, client) {
                            $("#InvoiceClientId").append('<option value="' + client.Id + '">' +
                                                            client.Name + '</option>');

                        });
                    }
                    $("#InvoiceClientId").trigger("chosen:updated");
                },
                error: function (jqXHR, exception) {
                    alert('Internal server error.Please try again.');
                }
            });
        }
    function sendEmail(ID, UserId, UsersCreditPaymentID) {
        $(".loader").show();
        $(".alert-dismissable").hide();
        $('.sendemail').addClass("disabled");
            $.ajax({
                traditional: true,
                url: '@Url.Action("SendInvoice", "Invoice", new {area="Admin" })',
                type: "POST",
                data: { billingId: ID, userid : UserId, UsersCreditPaymentID : UsersCreditPaymentID },
                success: function (data) {
                    $(".alert-dismissable").show();
                    $(".loader").hide();
                    $('.sendemail').removeClass("disabled");
                },
                error: function (jqXHR, exception) {
                    alert('Internal server error.Please try again.');
                }
            });
        }
        function dataTableSetup() {
            $('.dataTables-invoice').DataTable({
                "preDrawCallback": function (settings) {
                    $(".loader").show();
                },
                "info": false,
                bFilter: false,
                "aaSorting": [],
                "searching": false,
                "bLengthChange": false,
                "language": {
                    "infoEmpty": "No Record Found."
                },
                dom: '<"html5buttons"B>lTfgitp',
                aoColumnDefs: [
                    {
                        bSortable: false,
                        aTargets: [-1]
                    }
                ],
                buttons: [
                    {
                        extend: 'copy',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },//Billing
                    {
                        extend: 'csv',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'excel',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'pdf',
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },

                    {
                        extend: 'print',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        },
                        customize: function (win) {
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');

                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        }
                    }
                ],
                "drawCallback": function (settings) {
                    $(".loader").hide();
                },
                "fnInitComplete": function () { $(".loader").hide(); }	// Hide processingDiv when loading table is complete
            });
        }
        $(document).ready(function () {
            $('body').bind('keyup', function (event) {
                if (event.keyCode === 13) {
                    $('#form0').submit();
                }
            });
            $(".chosen-container").bind('keyup', function (e) {
                if (e.which === 13) {
                    $('#form0').submit();
                    // or your stuff here...
                }
            });
            $('#createdFrom').datetimepicker({ ignoreReadonly: true });

            $('#createdTo').datetimepicker({
                useCurrent: false, //Important! See issue #1075
                ignoreReadonly: true
            });

            $("#createdFrom").on("dp.change", function (e) {
                $('#createdTo').data("DateTimePicker").minDate(e.date);
            });

            $("#createdTo").on("dp.change", function (e) {
                $('#createdFrom').data("DateTimePicker").maxDate(e.date);
            });
            $('#fromdate').css({ "height": "34px" });
            $('#todate').css({ "height": "34px" });
            // ----------------------------
            $('#createdSettedFromdate').datetimepicker({ ignoreReadonly: true });

            $('#createdSettedTodate').datetimepicker({
                useCurrent: false, //Important! See issue #1075
                ignoreReadonly: true
            });

            $("#createdSettedFromdate").on("dp.change", function (e) {
                $('#createdSettedTodate').data("DateTimePicker").minDate(e.date);
            });

            $("#createdSettedTodate").on("dp.change", function (e) {
                $('#createdSettedFromdate').data("DateTimePicker").maxDate(e.date);
            });
            $('#SettedFromdate').css({ "height": "34px" });
            $('#SettedTodate').css({ "height": "34px" });

            $("#Item2_InvoiceFromTotal").keypress(function (event) {
                return isNumber(event, this)
            });

            $("#Item2_InvoiceToTotal").keypress(function (event) {
                return isNumber(event, this)
            });

            //Add 26-02-2019
            @*$.ajax({
                traditional: true,
                url: '@Url.Action("FillUserDropdownAJAX", "Invoice", new {area="Admin" })',
                type: "POST",
                data: { },
                success: function (data) {
                    $("#InvoiceUserId").empty();
                    if (data == "nodata" || data == "error") {

                    }
                    else {
                        $.each(data, function (i, users) {
                            $("#InvoiceUserId").append('<option value="' + users.Value + '">' +
                                users.Text + '</option>');

                        });
                    }
                    $("#InvoiceUserId").trigger("chosen:updated");
                },
                error: function (jqXHR, exception) {
                    alert('Internal server error.Please try again.');
                }
            });*@

            $("#UserId").change(function () {
                var userId = new Array();
                $("select#UserId option:selected").each(function () {
                    userId.push($(this).val());
                });
                getClientByUserId(userId);
            });
            $("#invoicereset").click(function () {
                $(".alert-dismissable").hide();
                $('#SettedFromdate').val('');
                $('#SettedTodate').val('');
                $('#fromdate').val('');
                $('#todate').val('');
                $(".loader").show();
                $("#UserId").select2("val", "");
                $("#Item2_InvoiceNO").val('');
                $("#Item2_PONumber").val('');
                $("#Item2_ClienId").val('0');
                $("#Item2_Fromdate").val('');
                $("#Item2_Todate").val('');
                $("#Item2_SettedFromdate").val('');
                $("#Item2_SettedTodate").val('');
                $("#Item2_InvoiceFromTotal").val('');
                $("#Item2_InvoiceToTotal").val('');
                $("#Item2_Status").val('0');
                $("#Item2_MethodOfPayment").val('0');
                $("#InvoiceClientId").val('0');
                $("#InvoiceClientId").trigger("chosen:updated");
                $("#InvoicestatusId").val('0');
                $("#InvoicestatusId").trigger("chosen:updated");
                $("#InvoicemethodId").val('0');
                $("#InvoicemethodId").trigger("chosen:updated");
                $("#UserId").val('0');
                $("#UserId").trigger("chosen:updated");
                //$("#InvoiceUserId").select2("val", "");

                $.ajax({
                    data: null,
                    datatype: "text/plain",
                    type: "POST",
                    url: '@Url.Action("SearchInvoice", "Invoice",new {area="Admin" })',
                    cache: false,
                    success: function (data) {
                        $("#invoiceList").html(data);
                        dataTableSetup();
                        $(".loader").hide();
                    }
                });
            });
            $('.dataTables-invoice').DataTable({
                "preDrawCallback": function (settings) {
                    $(".loader").show();
                },
                "info": false,
                bFilter: false,
                "aaSorting": [],
                "searching": false,
                "bLengthChange": false,
                "serverSide": true, // for process on server side
                "language": {
                    "infoEmpty": "No Record Found."
                },
                dom: '<"html5buttons"B>lTfgitp',
                aoColumnDefs: [
                    {
                        bSortable: false,
                        aTargets: [-1]
                    }
                ],
                buttons: [
                    {
                        extend: 'copy',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'csv',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'excel',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'pdf',
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },

                    {
                        extend: 'print',
                        title: 'Invoice',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        },
                        customize: function (win) {
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');

                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        }
                    }
                ],
                "ajax": {
                    "url": "/Admin/Invoice/LoadData",
                    "type": "POST",
                    "datatype": "json"
                },
                "aoColumns": [

                    { "data": "InvoiceNO", "name": "InvoiceNO", "autoWidth": false },//index-0
                    {
                        "data": "PONumber", "name": "PONumber", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            if (row.PONumber == null || row.PONumber == "") {
                                return '<td>-</td>';
                            }
                            else {
                                return '<td>' + row.PONumber + '</td>';
                            }
                        }
                    },//index-1
                    { "data": "UserName", "name": "UserName", "autoWidth": false },//index-2
                    {
                        "data": "Organisation", "name": "Organisation", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            if (row.Organisation == null || row.Organisation == "") {
                                return '<td>-</td>';
                            }
                            else {
                                return '<td>' + row.Organisation + '</td>';
                            }
                        }
                    },//index-3
                    {
                        "data": "Emailaddress", "name": "Emailaddress", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            return '<td><a href="/Admin/UserManagement/UserDetails?id=' + row.UserId + '">' + row.Emailaddress + '</a></td>';
                        }
                    },//index-4
                    {
                        "data": "ClientName", "name": "ClientName", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            if (row.ClientName != "-") {
                                return '<td><a class="clientname" href="/Admin/AdminClient/ClientDetails?id=' + row.ClienId + '">' + row.ClientName + '</a></td>';
                            }
                            else {
                                return '<td>-</td>';
                            }
                        }
                    },//index-5
                    {
                        "data": "CampaignName", "name": "CampaignName", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            return '<td><a href="/Admin/Campaign/Index?campaignId=' + row.CampaignId + '">' + row.CampaignName + '</a></td>';
                        }
                    },//index-6
                    { "data": "InvoiceDate", "name": "InvoiceDate", "autoWidth": false },//index-7
                    {
                        "data": "InvoiceTotal", "name": "InvoiceTotal", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            return '<td>' + parseFloat(row.InvoiceTotal).toFixed(2) + '</td>';
                        }
                    },//index-8
                    { "data": "status", "name": "status", "autoWidth": false },//index-9
                    { "data": "SettledDate", "name": "SettledDate", "autoWidth": false },//index-10
                    { "data": "MethodOfPayment", "name": "MethodOfPayment", "autoWidth": false },//index-11
                    {
                        "data": "Action", "name": "Action", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            //return '<td><a class="btn btn-blue btn-xs" href="/Admin/Invoice/SendInvoice?billingId=' + row.ID + '&userid=' + row.UserId + '&UsersCreditPaymentID=' + row.UsersCreditPaymentID + '">Send Email</a></td>';
                            return '<td><a class="btn btn-blue btn-xs sendemail" onclick="sendEmail(' + row.ID + ',' + row.UserId + ',' + row.UsersCreditPaymentID +');" href="#">Send Email</a></td>';
                        }
                    }//index-12
                ],
                "drawCallback": function (settings) {
                    $(".loader").hide();
                    $(".alert-dismissable").hide();
                },
                "fnInitComplete": function () { $(".loader").hide(); }
            });

            //$('#data_5 .input-daterange').datepicker({
            //    keyboardNavigation: false,
            //    forceParse: false,
            //    autoclose: true
            //});

            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });
        });

        var config = {
            '.chosen-select': { width: "100%" },
            '.chosen-select-deselect': { allow_single_deselect: true },
            '.chosen-select-no-single': { disable_search_threshold: 10 },
            '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
            '.chosen-select-width': { width: "95%" }
        }
        for (var selector in config) {
            $(selector).chosen(config[selector]);
        }

    </script>

}
