@using EFMVC.Web.Areas.Admin.SearchClass;
@using EFMVC.Web.Areas.Admin.Models;
@model Tuple<List<OperatorMaxAdvertsResult>, OperatorMaxAdvertsFilter>
<div class="row">
    <div class="col-lg-12">
        <div class="ibox">
            <div class="ibox-title" style="border-style:none;">
                <h5>Operator Max Advert Rule Management</h5>
                <div style="text-align:right">
                    <a class="btn btn-blue" href='@Url.Action("AddOperatorMaxAdverts","OperatorMaxAdverts",new {area="Admin"})'><i class="fa fa-plus"></i>&nbsp;Operator Max Advert Rule</a>
                </div>
            </div>
            @using (Ajax.BeginForm("SearchOperatorMaxAdvert", "OperatorMaxAdverts", null,
new AjaxOptions() { HttpMethod = "post", InsertionMode = InsertionMode.Replace, OnSuccess = "getoperatorresult", OnBegin = "progressbar" },
null))
            {
                <div class="ibox-content">
                    <div class="row">
                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Operators</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    @Html.DropDownList("operatorId", (MultiSelectList)ViewBag.operatordetails, new { @class = "chosen-select", multiple = "multiple", @data_placeholder = "All Operators" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Key Name</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    @Html.TextBoxFor(Model2 => Model2.Item2.Key, new { @class = "form-control", placeholder = "Key Name" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Key Value</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    @Html.TextBoxFor(Model2 => Model2.Item2.Value, new { @class = "form-control", placeholder = "Key Value" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group col-md-12 col-lg-12">
                            <div class="col-sm-12 center">
                                <button class="btn btn-blue" type="submit">Search</button>
                                <button class="btn btn-white" type="button" id="operatorreset">Reset</button>
                            </div>
                        </div>
                    </div>

                    <div id="operatorMaxAdvertList">
                        @{ 
                            Html.RenderPartial("_OperatorMaxAdvertsDetails", Model.Item1);
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<script type="text/javascript">

    var progressbar = function (data) {
        $(".spiner-example").show();
    };
    var getoperatorresult = function (data) {
        if (data != "notauthorise") {
            $(".spiner-example").hide();
            $('.dataTables-operatorMaxAdverts').remove();
            $("#operatorMaxAdvertList").html(data);
            dataTableSetup();
        }
        else {
            window.location.href = '@Url.Action("Index","Landing",new { area = "" })';
        }
    };
    function dataTableSetup() {
        $('.dataTables-operatorMaxAdverts').DataTable({
                "preDrawCallback": function (settings) {
                    $(".spiner-example").show();
                },
                "aaSorting": [],
                "info": false,
                bFilter: false,
                "searching": false,
                "bLengthChange": false,
                "language": {
                    "infoEmpty": "No Record Found."
                },
                aoColumnDefs: [
                    {
                        bSortable: false,
                        aTargets: [-1]
                    }
                ],
                exportOptions: {
                    columns: ':not(:last-child)',
                },
                dom: '<"html5buttons"B>lTfgitp',
                buttons: [

                    {
                        extend: 'copy',
                        text: 'Copy',
                        titleAttr: 'Copy',
                        title: 'OperatorMaxAdvertDetails',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }

                    },

                    {
                        extend: 'excel',
                        text: 'Excel',
                        titleAttr: 'Excel',
                        title: 'OperatorMaxAdvertDetails',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'csvHtml5',
                        text: 'CSV',
                        titleAttr: 'CSV',
                        title: 'OperatorMaxAdvertDetails',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'pdfHtml5',
                        text: 'PDF',
                        titleAttr: 'PDF',
                        title: 'OperatorMaxAdvertDetails',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        },
                    },
                    {
                        extend: 'print',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        },
                        customize: function (win) {
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');

                            $(win.document.body).find('table')
                                .addClass('compact')
                                .css('font-size', 'inherit');
                        }
                    }
                ],
                "drawCallback": function (settings) {
                    setTimeout(function () {
                        $(".spiner-example").hide();
                    }, 1000);
                },
                "fnInitComplete": function () {
                    setTimeout(function () {
                        $(".spiner-example").hide();
                    }, 1000);
                }	
            });
    }
</script>