@using EFMVC.Web.Areas.UsersAdmin.SearchClass;
@using EFMVC.Web.ViewModels;
@model Tuple<IEnumerable<UserProfileAdvertsReceivedFromModel>, AccountOverviewFilter>
<div class="row">
    <div class="col-lg-12">
        <div class="ibox">
            <div class="ibox-title" style="border-style:none;">
                <h5>Account Overview Management</h5>
            </div>

            @using (Ajax.BeginForm("SearchAccountOverview", "UserAdminAccountOverview", null,
  new AjaxOptions() { HttpMethod = "post", InsertionMode = InsertionMode.Replace, OnSuccess = "getblockednumberresult", OnBegin = "progressbar" },
  null))
            {
                <div class="ibox-content">
                    <div class="row">
                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Advert Ref</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    @Html.TextBoxFor(Model2 => Model2.Item2.AdvertRef, new { @class = "form-control", placeholder = "Advert Ref" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Advert Name</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    @Html.TextBoxFor(Model2 => Model2.Item2.AdvertName, new { @class = "form-control", placeholder = "Advert Name" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Brand</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    @Html.TextBoxFor(Model2 => Model2.Item2.Brand, new { @class = "form-control", placeholder = "Brand" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Date Played</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    <div class="input-daterange input-group clsendit">
                                        <div class='input-group' id='createdFrom'>
                                            @Html.TextBoxFor(Model1 => Model1.Item2.FromDateTimePlayed, new { @class = "input-sm form-control", @id = "fromdate", @Value = "", @data_date_format = "DD/MM/YYYY", @readonly = "readonly" })
                                            <span class="input-group-addon calendar-icon">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                        <span class="input-group-addon" style="background-color: #eeeeee;">to</span>
                                        <div class='input-group' id='createdTo'>
                                            @Html.TextBoxFor(Model1 => Model1.Item2.ToDateTimePlayed, new { @class = "input-sm form-control", @id = "todate", @Value = "", @data_date_format = "DD/MM/YYYY", @readonly = "readonly" })
                                            <span class="input-group-addon calendar-icon">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 col-lg-4 ibox-field">
                            <label class="col-md-12 col-lg-2 control-label">Credit Received</label>
                            <div class="col-md-12 col-lg-10">
                                <div class="form-group">
                                    <div class="input-daterange input-group">
                                        @Html.TextBoxFor(Model2 => Model2.Item2.FromCreditReceived, new { @class = "input-sm form-control" })
                                        <span class="input-group-addon">to</span>
                                        @Html.TextBoxFor(Model2 => Model2.Item2.ToCreditReceived, new { @class = "input-sm form-control" })

                                    </div>
                                    <span id="errormsg" style="display:none;color:red;"></span>
                                </div>
                            </div>
                        </div>

                        <div class="form-group col-md-12 col-lg-12">
                            <div class="col-sm-12 center">
                                <button class="btn btn-blue" type="submit">Search</button>
                                <button class="btn btn-white" type="button" id="accounto_reset">Reset</button>
                            </div>
                        </div>
                    </div>

                    @if (Model.Item1 != null)
                    {
                        <div id="accountOverviewList">
                            @{ Html.RenderPartial("_AccountOverviewDetails", Model.Item1);}
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>
<script type="text/javascript">
    var progressbar = function (data) {
        $(".spiner-example").show();
    };
    var getblockednumberresult = function (data) {
        if (data != "notauthorise") {
            $(".spiner-example").hide();
            $('.dataTables-accountOverview').remove();
            $("#accountOverviewList").html(data);
            dataTableSetup();
        }
        else {
            window.location.href = '@Url.Action("Index","Landing",new { area = "" })';
        }
    };
    function dataTableSetup() {
        $('.dataTables-accountOverview').DataTable({
            "preDrawCallback": function (settings) {
                $(".spiner-example").show();
            },
            "aaSorting": [],
            "info": false,
            bFilter: false,
            "searching": false,
            aoColumnDefs: [
           {
               bSortable: false,
               aTargets: [-1]
           }
            ],
            "bLengthChange": false,
            "language": {
                "infoEmpty": "No Record Found."
            },
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                {
                    extend: 'copy',
                    title: 'AccountOverview',
                    exportOptions: {
                        columns: ':not(:last-child)',
                    }
                },
                {
                    extend: 'csv',
                    title: 'AccountOverview',
                    exportOptions: {
                        columns: ':not(:last-child)',
                    }
                },
                {
                    extend: 'excel',
                    title: 'AccountOverview',
                    exportOptions: {
                        columns: ':not(:last-child)',
                    }
                },
                {
                    extend: 'pdf',
                    title: 'AccountOverview',
                    exportOptions: {
                        columns: ':not(:last-child)',
                    }
                },

                {
                    extend: 'print',
                    title: 'AccountOverview',
                    exportOptions: {
                        columns: ':not(:last-child)',
                    },
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                                .addClass('compact')
                                .css('font-size', 'inherit');
                    }
                }
            ],
            "drawCallback": function (settings) {
                $(".spiner-example").hide();
            },
            "fnInitComplete": function () { $(".spiner-example").hide(); }	// Hide processingDiv when loading table is complete
        });
    }
</script>
