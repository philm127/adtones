@using EFMVC.Web.Areas.Users.Models;
@model Tuple<List<TicketResult>, TicketFilter>
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Users/Views/Shared/_Layout.cshtml";
}


<div class="wrapper wrapper-content animated fadeIn">

    <div class="spiner-example" style="display:none;">
        <div class="sk-spinner sk-spinner-three-bounce">
            <div class="sk-bounce1"></div>
            <div class="sk-bounce2"></div>
            <div class="sk-bounce3"></div>
        </div>
    </div>
    <div class="p-w-md m-t-sm">
        <div class="row">
            <div class="col-lg-12">
                <div class="ibox">
                    <div class="ibox-content">
                        @Html.Partial("_TicketManagement", Tuple.Create<List<TicketResult>, TicketFilter>(Model.Item1, Model.Item2))
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Styles {
    @Styles.Render("~/plugins/awesomeCheckboxStyles")
    @Styles.Render("~/plugins/clockpickerStyles")
    @*@Styles.Render("~/plugins/dateRangeStyles")*@
    @Styles.Render("~/Content/plugins/iCheck/custom")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/plugins/switcheryStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/nouiSliderStyles")
    @*@Styles.Render("~/plugins/dataPickerStyles")*@
    @Styles.Render("~/Content/plugins/ionRangeSlider/ionRangeStyles")
    @Styles.Render("~/plugins/imagecropperStyles")
    @Styles.Render("~/Content/plugins/colorpicker/colorpickerStyles")
    @Styles.Render("~/plugins/select2Styles")
    @Styles.Render("~/plugins/touchSpinStyles")
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
    @Styles.Render("~/plugins/daterangepickerNewStyles")

}
@section Scripts {
    @Scripts.Render("~/plugins/sparkLine")
    @Scripts.Render("~/plugins/flot")
    @Scripts.Render("~/plugins/iCheck")
    @*@Scripts.Render("~/plugins/dataPicker")*@
    @Scripts.Render("~/plugins/ionRange")
    @Scripts.Render("~/plugins/nouiSlider")
    @Scripts.Render("~/plugins/jasnyBootstrap")
    @Scripts.Render("~/plugins/switchery")
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/knob")
    @Scripts.Render("~/plugins/imagecropper")
    @Scripts.Render("~/plugins/colorpicker")
    @Scripts.Render("~/plugins/clockpicker")
    @*@Scripts.Render("~/plugins/dateRange")*@
    @Scripts.Render("~/plugins/select2")
    @Scripts.Render("~/plugins/touchSpin")
    @Scripts.Render("~/plugins/jeditable")
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/plugins/daterangepickerNew")
<script type="text/javascript">
        function dataTableSetup() {
            $('.dataTables-question').DataTable({
                "aaSorting": [],
                "info": false,
                bFilter: false,
                "searching": false,
                aoColumnDefs: [
                   {
                       bSortable: false,
                       aTargets: [-1]
                   }
                ],
                "bLengthChange": false,
                "language": {
                    "infoEmpty": "No Record Found."
                },
                dom: '<"html5buttons"B>lTfgitp',
                buttons: [
                    {
                        extend: 'copy',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },//Question
                    {
                        extend: 'csv',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'excel',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'pdf',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },

                    {
                        extend: 'print',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        },
                        customize: function (win) {
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');

                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        }
                    }
                ]
            });
        }
        function getClientByUserId(userId) {
            $.ajax({
                traditional: true,
                url: '@Url.Action("GetClientsUser", "Ticket",new {area="Users" })',
                type: "POST",
                data: { userId: userId },
                success: function (data) {
                    $("#ClientId").empty();
                    if (data == "nodata" || data == "error") {

                    }
                    else {
                        $.each(data, function (i, client) {
                            $("#ClientId").append('<option value="' + client.Id + '">' +
                                                            client.Name + '</option>');

                        });
                    }
                    $("#ClientId").trigger("chosen:updated");
                },
                error: function (jqXHR, exception) {
                    alert('Internal server error.Please try again.');
                }
            });

        }
        function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)", "i"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }
        $(document).ready(function () {

            $('body').bind('keyup', function (event) {
                if (event.keyCode === 13) {
                    $('#form0').submit();
                }
            });
            $(".chosen-container").bind('keyup', function (e) {
                if (e.which === 13) {
                    $('#form0').submit();
                    // or your stuff here...
                }
            });
            $('#createdFrom').datetimepicker({ ignoreReadonly: true });

            $('#createdTo').datetimepicker({
                useCurrent: false, //Important! See issue #1075
                ignoreReadonly: true
            });

            $("#createdFrom").on("dp.change", function (e) {
                $('#createdTo').data("DateTimePicker").minDate(e.date);
            });

            $("#createdTo").on("dp.change", function (e) {
                $('#createdFrom').data("DateTimePicker").maxDate(e.date);
            });

            // -----

            $('#createdLastResponseFromdate').datetimepicker({ ignoreReadonly: true });

            $('#createdLastResponseTodate').datetimepicker({
                useCurrent: false, //Important! See issue #1075
                ignoreReadonly: true
            });

            $("#createdLastResponseFromdate").on("dp.change", function (e) {
                $('#createdLastResponseTodate').data("DateTimePicker").minDate(e.date);
            });

            $("#createdLastResponseTodate").on("dp.change", function (e) {
                $('#createdLastResponseFromdate').data("DateTimePicker").maxDate(e.date);
            });

            $('#fromdate').css({ "height": "34px" });
            $('#todate').css({ "height": "34px" });
            $('#LastResponseFromdate').css({ "height": "34px" });
            $('#LastResponseTodate').css({ "height": "34px" });
            var user_Id = getParameterByName("userId");
            if(user_Id!='')
            {
                var userId = new Array();
                userId.push(user_Id);
                getClientByUserId(userId);
            }
            $("#UserId").change(function () {
                var userId = new Array();
                $("select#UserId option:selected").each(function () {
                    userId.push($(this).val());
                });
                getClientByUserId(userId);
            });
            //$('#data_5 .input-daterange').datepicker({
            //    keyboardNavigation: false,
            //    forceParse: false,
            //    autoclose: true
            //});
            var config = {
                '.chosen-select': { width: "100%" },
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                '.chosen-select-width': { width: "95%" }
            }
            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }
            $("#helpreset").click(function () {
                $('#fromdate').val('');
                $('#todate').val('');
                $('#LastResponseFromdate').val('');
                $('#LastResponseTodate').val('');
                $(".spiner-example").show();
                $("#Item2_ID").val('');
                $("#SubjectId").val('0');
                $("#SubjectId").trigger("chosen:updated");
                $("#StatusId").val('0');
                $("#StatusId").trigger("chosen:updated");
                $("#Item2_ClientId").val('0');
                $("#Item2_UserId").val('0');
                $("#Item2_Fromdate").val('');
                $("#Item2_Todate").val('');
                $("#Item2_LastResponseFromdate").val('');
                $("#Item2_LastResponseTodate").val('');
                $("#Item2_SubjectId").val('0');
                $("#Item2_Status").val('0');
                $("#Item2_PaymentMethodId").val("0");
                $.ajax({
                    data: null,
                    datatype: "text/plain",
                    type: "POST",
                    url: '@Url.Action("SearchTicket", "Ticket")',
                    cache: false,
                    success: function (data) {
                        $(".spiner-example").hide();
                        $("#questionList").html(data);
                        dataTableSetup();
                    }
                });
            });
            $('.dataTables-question').DataTable({
                "preDrawCallback": function (settings) {
                    $(".spiner-example").show();
                },
                "aaSorting": [],
                "info": false,
                bFilter: false,
                "searching": false,
                "bLengthChange": false,
                "serverSide": true, // for process on server side
                "language": {
                    "infoEmpty": "No Record Found."
                },
                aoColumnDefs: [
                   {
                       bSortable: false,
                       aTargets: [-1]
                   }
                ],
                dom: '<"html5buttons"B>lTfgitp',
                buttons: [
                    {
                        extend: 'copy',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'csv',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'excel',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },
                    {
                        extend: 'pdf',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        }
                    },

                    {
                        extend: 'print',
                        title: 'Tickets',
                        exportOptions: {
                            columns: ':not(:last-child)',
                        },
                        customize: function (win) {
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');

                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        }
                    }
                ],
                "ajax": {
                    "url": "/Users/Ticket/LoadData",
                    "type": "POST",
                    "datatype": "json"
                },
                "aoColumns": [

                    {
                        "data": "QANumber", "name": "QANumber", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            return '<td><a href=/Users/Ticket/TicketDetails?id=' + row.Id + '>' + row.QANumber + '</a></td>';
                        }
                    },//index-0
                    { "data": "QuestionDateTime", "name": "QuestionDateTime", "autoWidth": false },//index-1
                    { "data": "QuestionTitle", "name": "QuestionTitle", "autoWidth": false },//index-2
                    { "data": "QuestionSubject", "name": "QuestionSubject", "autoWidth": false },//index-3
                    {
                        "data": "PaymentMethodId", "name": "PaymentMethodId", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            if (row.PaymentMethodId == 1) {
                                return '<td>Credit</td>';
                            }
                            else if (row.PaymentMethodId == 2) {
                                return '<td>Card</td>';
                            }
                            else if (row.PaymentMethodId == 3) {
                                return '<td>Paypal</td>';
                            }
                            else if (row.PaymentMethodId == 5) {
                                return '<td>CoinBase</td>';
                            }
                            else if (row.PaymentMethodId == 6) {
                                return '<td>Mpesa</td>';
                            }
                            else {
                                return '<td>-</td>';
                            }
                        }
                    },
                    {
                        "data": "Status", "name": "Status", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            if (row.Status == 3 || row.Status == 4) {
                                return '<label class="label label-danger">' + row.fStatus + '</label>';
                            }
                            else {
                                return '<label class="label label-primary">' + row.fStatus + '</label>';
                            }
                        }
                    },//index-4
                    {
                        "data": "lastResponseDateTime", "name": "lastResponseDateTime", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            if (row.LastResponseDatetime == null) {
                                return '<td>-</td>';
                            }
                            else {
                                return '<td>' + row.LastResponseDatetime + '</td>';
                            }
                        }
                    },//index-5
                    {
                        "data": "Action", "name": "Action", "autoWidth": false,
                        "mRender": function (data, type, row) {
                            if (row.Status == 3) {
                                return '<a class="btn btn-danger btn-xs" onclick="deleteQuestion(' + row.Id + ')">Archive</a>';
                            }
                            else {
                                return '<td>-</td>';
                            }
                        }
                    }//index-6
                ],
                "drawCallback": function (settings) {
                    $(".spiner-example").hide();
                },
                "fnInitComplete": function () { $(".spiner-example").hide(); }
            });
        });

</script>
}

